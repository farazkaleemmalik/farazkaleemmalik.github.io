<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://farazkaleemmalik.cyou/feed.xml" rel="self" type="application/atom+xml" /><link href="https://farazkaleemmalik.cyou/" rel="alternate" type="text/html" /><updated>2025-01-22T11:10:54+00:00</updated><id>https://farazkaleemmalik.cyou/feed.xml</id><title type="html">Faraz Kaleem Malik</title><subtitle>Personal website for a Computer Science student at UofT</subtitle><author><name>farazkaleemmalik</name></author><entry><title type="html">New Years Resolutions 2025</title><link href="https://farazkaleemmalik.cyou/blog/2025/newyears/" rel="alternate" type="text/html" title="New Years Resolutions 2025" /><published>2025-01-01T00:00:00+00:00</published><updated>2025-01-01T00:00:00+00:00</updated><id>https://farazkaleemmalik.cyou/blog/2025/newyears</id><content type="html" xml:base="https://farazkaleemmalik.cyou/blog/2025/newyears/"><![CDATA[<p>Better to put them to paper somewhere!</p>

<blockquote>
  <h3 id="post-here-at-around-twice-a-month">Post here at around twice a month</h3>
</blockquote>

<p>I’ll start off with the one most relevant to you - the reader! I think this is the sweet spot for someone like me who only does this for fun. Of these these two articles, some <em>may</em> be relatively low effort (at least to write/compile like this one), but I think it would be productive to put my efforts into inclreasing quality at this pace rather than increasing the pace. Burnout is also something to consider. Sometimes less is more.</p>

<blockquote>
  <h3 id="get-better-at-remembering-names">Get better at remembering names</h3>
</blockquote>

<p>I’m not a names person. I have a comically short term memory for this type of information. My guess is because I remember stuff best by association (oh, the guy with the cool jacket), and the fact that names are never correlated with <em>anything</em> else about a person, it’s hard to derive it from anything else about them. Still, I’m going to make a conscious effort this year to get better at remembering names - using whether memory tricks I can.</p>

<p>Not a very SMART goal - but I’m not sure how to turn this into a metric.</p>

<blockquote>
  <h3 id="write-more-code">Write more code</h3>
</blockquote>

<p>Lame. I know. But with how many projects never leave the research phase in my backlog I think this is warranted. I’ve got so many projects where I have a proper understanding of the problem and my solution but I never start because… the tech stack is too annoying… or the boilerplate is too complicated… or the thought of actually <em>writing</em> the code suddenly kills all motivation I had for it.</p>

<p>For something measurable, I want to make at least 1 meaningful contribution (features, not commits!) to a side project every week. For code, this would look like activity on my Github pixel-thing. For more open ended stuff (based on experimentation/research), this would look like a writeup in the form of a devblog (like the <a href="/blog/2023/openwrt1">OpenWRT</a> post).</p>]]></content><author><name>Faraz Kaleem Malik</name><email>webmaster@farazkaleemmalik.cyou</email></author><summary type="html"><![CDATA[Better to put them to paper somewhere!]]></summary></entry><entry><title type="html">Exam Music</title><link href="https://farazkaleemmalik.cyou/blog/2024/exam-music/" rel="alternate" type="text/html" title="Exam Music" /><published>2024-12-22T00:00:00+00:00</published><updated>2024-12-22T00:00:00+00:00</updated><id>https://farazkaleemmalik.cyou/blog/2024/exam-music</id><content type="html" xml:base="https://farazkaleemmalik.cyou/blog/2024/exam-music/"><![CDATA[<p>I’ve noticed I have specific a song stuck in my head for every exam I write, so I’m cataloging it (for fun and profit).</p>

<p>This page will be republished as I write more and more exams!</p>

<h3 id="fall-2024">Fall 2024</h3>

<p><strong>CSC343 (Intro to Databases) Final</strong>: “Eighth Wonder” - Lemon Demon</p>

<p><strong>CSCD27 (Computer and Network Security)</strong>: Surprisingly none - I was too focused. <em>Before</em> the exam it was “Amnesia Was Her Name” - Lemon Demon.</p>

<p>Overall, somewhat of an obvious pattern. I’m surprised at how many of these songs have animations on Youtube (I think all the lyrical ones from Spirit Phone are covered).</p>]]></content><author><name>Faraz Kaleem Malik</name><email>webmaster@farazkaleemmalik.cyou</email></author><summary type="html"><![CDATA[I’ve noticed I have specific a song stuck in my head for every exam I write, so I’m cataloging it (for fun and profit).]]></summary></entry><entry><title type="html">Using Github Actions as janky serverless infrastructure</title><link href="https://farazkaleemmalik.cyou/blog/2024/githubactions1/" rel="alternate" type="text/html" title="Using Github Actions as janky serverless infrastructure" /><published>2024-12-01T00:00:00+00:00</published><updated>2024-12-01T00:00:00+00:00</updated><id>https://farazkaleemmalik.cyou/blog/2024/githubactions1</id><content type="html" xml:base="https://farazkaleemmalik.cyou/blog/2024/githubactions1/"><![CDATA[<p>Replace your tiny VPS with a Github repo today!</p>

<h2 id="the-requirements">The Requirements</h2>

<p>For an ongoing effort to build some infrastructure for a university <a href="https://uoftwebloggingclub.neocities.org">club</a> <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> I’m starting, I needed to aggregate RSS feeds into a single hosted megafeed, in order to further pipe this feed to a Discord bot, among other things. In practice, this would mean setting up a VPS, downloading some combiner script off of Github and setting up a cron job to download, run, and upload on a regular basis. One could also haphazardly use one of the multitudes of online services that do this, the downside being clunky modification, nonportability, arbitrary restrictions, and of course the Sword of Damocles that hangs over every small scale web startup.</p>

<p>In my search, I found a Github repo innocently called <a href="https://github.com/chase-seibert/rsscombine">rss-combine</a> which did something pretty interesting (and might help someone with the same problem).</p>

<h2 id="the-repo">The Repo</h2>

<p>The code in the repo looks pretty normal. For the VPS solution, the Go code would actually have been sufficient to download and combine the feeds to a single file. But what are these commits?</p>

<p><img src="/assets/images/githubactions/commits.png" alt="Automated Commits" /></p>

<p>They seems to be caused by <a href="https://github.com/marketplace/actions/keepalive-workflow">this</a> action, which is designed to keep your repo “active” for cron(!) based action triggers. Understandably these kinds of actions have alot of compute cost, while being offered for free, so it makes sense why Github would try limiting them for untouched repos. Lets take a look at some of the cron-based actions rss-combine is trying to preserve.</p>

<p><img src="/assets/images/githubactions/actions.png" alt="Actions" /></p>

<p><img src="/assets/images/githubactions/result.png" alt="Action Result" /></p>

<p>The actions seem to be running the repo itself!</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">env</span><span class="pi">:</span>
        <span class="na">AWS_ACCESS_KEY_ID</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">AWS_SECRET_ACCESS_KEY</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">AWS_REGION</span><span class="pi">:</span> <span class="s">us-west-2</span>
        <span class="na">RSSCOMBINE_TITLE</span><span class="pi">:</span> <span class="s2">"</span><span class="s">New</span><span class="nv"> </span><span class="s">York</span><span class="nv"> </span><span class="s">Times</span><span class="nv"> </span><span class="s">Top</span><span class="nv"> </span><span class="s">100</span><span class="nv"> </span><span class="s">Articles</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">Week"</span>        
        <span class="na">RSSCOMBINE_DESCRIPTION</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Combines</span><span class="nv"> </span><span class="s">public</span><span class="nv"> </span><span class="s">New</span><span class="nv"> </span><span class="s">York</span><span class="nv"> </span><span class="s">Times</span><span class="nv"> </span><span class="s">RSS</span><span class="nv"> </span><span class="s">feeds</span><span class="nv"> </span><span class="s">into</span><span class="nv"> </span><span class="s">one</span><span class="nv"> </span><span class="s">feed,</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">goal</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">surfacing</span><span class="nv"> </span><span class="s">only</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">top</span><span class="nv"> </span><span class="s">items"</span>        
        <span class="na">RSSCOMBINE_AUTHOR_EMAIL</span><span class="pi">:</span> <span class="s2">"</span><span class="s">***"</span>        
        <span class="na">RSSCOMBINE_AUTHOR_NAME</span><span class="pi">:</span> <span class="s2">"</span><span class="s">***"</span>
        <span class="na">RSSCOMBINE_FEED_LIMIT_PER_FEED</span><span class="pi">:</span> <span class="m">5</span>
        <span class="na">RSSCOMBINE_FEED_URLS</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://raw.githubusercontent.com/chase-seibert/new-york-times-rss-top-100/master/README.md"</span>
        <span class="na">RSSCOMBINE_LINK</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://github.com/chase-seibert/new-york-times-rss-top-100"</span>
        <span class="na">RSSCOMBINE_S3_FILENAME</span><span class="pi">:</span> <span class="s2">"</span><span class="s">new-york-times-rss-top-100.xml"</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>Using the built in “upload to S3” functionality, it seems to be uploading the resulting feed to a <a href="https://github.com/chase-seibert/new-york-times-rss-top-100">predetermined bucket</a>, presumably for public access. Neat.</p>

<h2 id="adapting-it">Adapting it</h2>

<p>The final result is <a href="https://github.com/uoftwebloggingclub/rsscombine">here</a> if you want to follow along.</p>

<p>Looking at the workflow file (located in .github/workflows in the repo), all of the required config could be done by just changing the <code class="language-plaintext highlighter-rouge">env</code> variables in the config. A particular snag was that the config <code class="language-plaintext highlighter-rouge">s3_bucket</code>, with which the code determines whether the output is uploaded to s3 or piped out stdout, was not present in the env. This was because it was located in <code class="language-plaintext highlighter-rouge">rsscombine.yml</code>, which I pruned all redundant config from.</p>

<p><code class="language-plaintext highlighter-rouge">run</code> commands are run with the os’s default shell (for ubuntu bash) so I’m able to do this</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">run</span><span class="pi">:</span> <span class="s">go run rsscombine.go &gt; feed.xml</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>And then</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">run</span><span class="pi">:</span> <span class="s">curl -F "feed.xml=@feed.xml" "https://$:$@neocities.org/api/upload"</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>Thankfully neocities’ upload system is dead simple so there was no problem there. If you want to run a similar setup, both <a href="https://github.com/uoftwebloggingclub/rsscombine/blob/master/.github/workflows/blogroll.yml">my</a> and <a href="https://github.com/chase-seibert/rsscombine/blob/master/.github/workflows/new-york-times-rss-top-100.yml">the</a> <a href="https://github.com/chase-seibert/rsscombine/blob/master/.github/workflows/engineering-manager-blogs.yml">originals</a> are there for you to model your workflow config off of. Thanks for reading!</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>A weblogging and homebrew website club. The website is sparse at the time of publishing, and is only linked for posteritys’ sake. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Faraz Kaleem Malik</name><email>webmaster@farazkaleemmalik.cyou</email></author><summary type="html"><![CDATA[Replace your tiny VPS with a Github repo today!]]></summary></entry><entry><title type="html">Thunderbird RSS Hack</title><link href="https://farazkaleemmalik.cyou/blog/2024/thunderbird2/" rel="alternate" type="text/html" title="Thunderbird RSS Hack" /><published>2024-11-10T00:00:00+00:00</published><updated>2024-11-10T00:00:00+00:00</updated><id>https://farazkaleemmalik.cyou/blog/2024/thunderbird2</id><content type="html" xml:base="https://farazkaleemmalik.cyou/blog/2024/thunderbird2/"><![CDATA[<p>Final Thunderbird post for a while, I promise</p>

<h2 id="the-problem">The problem</h2>

<p>So for my RSS reader, I use Thunderbird since I already use it for email and, like I demonstrate in my previous post, OpenPGP as well. I actually use it for CalDAV as well, all in all its a featureful organisation software.</p>

<p>The biggest flaw for me is the fact that settings cannot be synced between clients. So for example, since Thunderbird is on my desktop, when I add a feed to my reader on it, it doesn’t show up on the Thunderbird on my laptop. Furthermore, what if I want to read on my phone? Do I need to maiantain 3 lists of the same thing manually?</p>

<p>One solution is a web based one. That is, your RSS feed sits on a server somewhere and you run a web application that lets you access it from anywhere with an internet connection and browser. In most cases however, this would require such a person to learn system administration, which while valuable knowledge serves as a significant barrier to entry. One could use someone else’s instance, but in my search I found it really difficult to find anyone else offering this.</p>

<p>My solution was somewhat born out of an idea: what if we could apply Thunderbird’s mail filters to RSS feed entries? I’m not really sure what I expected to happen, but apparently it was actually possible! Thunderbird seems to treat your entire “Blogs and News Feeds” section as one mail folder, and treats each incoming feed entry as an incoming email. Neat!</p>

<h2 id="the-solution">The solution</h2>

<p>We can use mail filters to move RSS entries as they come in to a specific subfolder in your mailbox.</p>

<blockquote>
  <p>What? Can articles and blogposts really be uploaded to a mailbox?</p>
</blockquote>

<p>Thunderbird appears to store feed entries as emails, or somehow converts entries to emails (with metadata becoming email headers) during handling of our rules. It strangely works, though you may see some missing info if you view it from another client like K9 Mail. Here are the rules. Recall that the message filter window can be opened by clicking the top-left hamburger menu then going to Tools -&gt; Message Filters.</p>

<h3 id="on-blogs-and-feeds">On ‘Blogs and Feeds’</h3>

<p><img src="/assets/images/thunderbird/rules1.png" alt="First set of rules" /></p>

<p>Some email addresses are redacted for privacy, but really it should be the email address you want to upload the feed entries to. It first tags them as RSS, then moves them to your inbox.</p>

<blockquote>
  <p>But why not move it to your ‘RSS’ subfolder directly?</p>
</blockquote>

<p>We also want to mark all entries in our email copies of the feed items as read, while maintaining the ‘unreadness’ in our main reader. It would be annoying having to mark 2 entries as read every time you read an article, so we don’t bother</p>

<h3 id="on-email-inbox">On Email Inbox</h3>

<p><img src="/assets/images/thunderbird/rules2.png" alt="Second set of rules" /></p>

<p>Once an RSS tagged entry is detected, it marks the entry as ‘Read’ then moves it to the corresponding folder, without messing with any of the original feed entries. Neat! If you open this folder on another Thunderbird client, most of the metadata you are used to seeing like the “Website” tag is still there surprisingly, allowing you to read your feeds anywhere you choose.</p>]]></content><author><name>Faraz Kaleem Malik</name><email>webmaster@farazkaleemmalik.cyou</email></author><summary type="html"><![CDATA[Final Thunderbird post for a while, I promise]]></summary></entry><entry><title type="html">Getting started with OpenPGP on Thunderbird 115.13.0</title><link href="https://farazkaleemmalik.cyou/blog/2024/thunderbird1/" rel="alternate" type="text/html" title="Getting started with OpenPGP on Thunderbird 115.13.0" /><published>2024-11-09T00:00:00+00:00</published><updated>2024-11-09T00:00:00+00:00</updated><id>https://farazkaleemmalik.cyou/blog/2024/thunderbird1</id><content type="html" xml:base="https://farazkaleemmalik.cyou/blog/2024/thunderbird1/"><![CDATA[<p>2 posts in a row! I can’t believe it!</p>

<h2 id="overview">Overview</h2>

<p>For some reason, Thunderbird decides to change key workflows every few months that make any previous instruction on the matter completely pointless and even convoluting the entire process. I’m aware even this guide will be outdated within months but I’ll make one anyways just because. The version of Thunderbird I am using is the latest for Linux Mint 21.3 as of the date posted.</p>

<h3 id="step-0">Step 0</h3>

<p>You first need to have some email account imported into Thunderbird. There are tons of articles exaplining this and its otherwise quite intuitive, so I’ll skip it.</p>

<h3 id="step-1-open-openpgp-menu">Step 1: Open OpenPGP Menu</h3>

<p>You first need to generate your PGP keys. This is assuming you don’t already have PGP keys associated with your account. Remember, this is a getting started guide, in which case you would have to import them using a similar but not covered process.</p>

<p><img src="/assets/images/thunderbird/menu1.png" alt="Tools" /></p>

<p>Open the hamburger menu in the top right corner of the application, and then go Tools</p>

<p><img src="/assets/images/thunderbird/menu2.png" alt="OpenPGP Key Manager" /></p>

<p>Then select “OpenPGP Key Manager”. This should open up a new menu (which I won’t show since it’s populated with some personal contacts).</p>

<h3 id="step-2-generate-keys">Step 2: Generate Keys</h3>

<p>In the toolbar for the new menu, select “Generate -&gt; New Pair”. From there the defaults should be fine, just make sure that the “Identity” email address is the one you want. You will have to generate a new key for each email account you want to send encrypted email on.</p>

<p>Once you are done, there will be an entry in your OpenPGP Key Manager window for the key you just created.</p>

<h3 id="step-3-set-key-to-active-encryption-key">Step 3: Set key to active encryption key</h3>

<p>Go to your accounts settings page. For me this is the gear on the bottom left corner of the window and then the option saying “Account Settings” still on the bottom left. Find the email address you just generated in the list on the left, and go to the entry saying “End-to-End Encryption” underneath it.</p>

<p><img src="/assets/images/thunderbird/menu3.png" alt="End-to-End" /></p>

<p>From there, like shown above, select the second option (the one with numbers) and you will see a checkmark, which means you’re done! You can publish your key by pressing the relevant button, but make sure you’re using a computer you actually <em>own</em> since the key is stored on your actual machine. Basically, if you’re at a library or on a school computer, you stop here and do this on a computer your own!</p>

<p>That’s it so far. To actually <em>send</em> an email you would need to import someone else’s key from either a keyserver or a file, but I’ll leave that part for another time.</p>

<p>For site maintenance, I’ve added an RSS feed and will add my own PGP key soon.</p>]]></content><author><name>Faraz Kaleem Malik</name><email>webmaster@farazkaleemmalik.cyou</email></author><summary type="html"><![CDATA[2 posts in a row! I can’t believe it!]]></summary></entry><entry><title type="html">Update on last 2 posts</title><link href="https://farazkaleemmalik.cyou/blog/2024/update1/" rel="alternate" type="text/html" title="Update on last 2 posts" /><published>2024-11-07T00:00:00+00:00</published><updated>2024-11-07T00:00:00+00:00</updated><id>https://farazkaleemmalik.cyou/blog/2024/update1</id><content type="html" xml:base="https://farazkaleemmalik.cyou/blog/2024/update1/"><![CDATA[<p>A small update on the ongoing nature of my previous two posts</p>

<h2 id="update-to-the-homelab">Update to the homelab</h2>

<p>Fun fact: old gear breaks! Especially when you open it to do upgrades! This is what happened to my Netgear NAS as soon as I opened it to replace the probably decades-old fan with a silent Noctua. Disassembly required many different parts to be disconnected and unscrewed, so its anyone’s guess where the issue lies. I did remove the socketed RAM extraneously because I was interested about the specs, but at this point buying new RAM just to see if that’s the issue would be falling victim to the sunken-cost fallacy.</p>

<p>Instead, I went to this nice <a href="https://computation.ca/">computer refurbisher on Jane street</a> and bought an old Elitedesk to operate as both my storage and server (sorry Sesame Snaps server, you will be remembered in all your sweetness). It’s been going stable for over 6 months, a very capable machine indeed. This is my second machine I have bought from this shop, the first being the desktop I am writing this article on.</p>

<p>For further updates, I’ve LAN-ed up most of my network to get proper gigabit connections between all my machines, though the WAN is still restricted by my 100/10M Linksys router. I guess I know what part of my network I need to upgrade next.</p>

<h2 id="update-to-lineageos">Update to LineageOS</h2>

<p>That project is basically dead. I used whatever flashing setup I had to just flash a stock Android ROM I got off the internet for my specific device. I’ve decided to stop fighting against my phone manufacturer for control over my phone and decided to just choose my hardware a bit more carefully next time. For all of its flaws, the Pinephone actually seems like a decent option right now, given that it can do exactly what I need it to and nothing more. And the keyboard case? Chef’s kiss.</p>

<p><img src="/assets/images/update/keyboard.jpg" alt="" /></p>

<p>The concept of a cyberdeck is really growing on me, and this seems like the cheapest method to achieve a pocketable version that also supports portable connection methods like LTE and cellular calling. Its been thrust into the public zeitgeist again thanks to a Youtube trend just how insanely easy it is for phone networks to triangulate your location just by your phone being on, so I’m happy there is at least one device that allows your to physically disable your modem via a dip switch should you want to.</p>]]></content><author><name>Faraz Kaleem Malik</name><email>webmaster@farazkaleemmalik.cyou</email></author><summary type="html"><![CDATA[A small update on the ongoing nature of my previous two posts]]></summary></entry><entry><title type="html">Budget Homelab Overview</title><link href="https://farazkaleemmalik.cyou/blog/2024/homelab1/" rel="alternate" type="text/html" title="Budget Homelab Overview" /><published>2024-02-09T00:00:00+00:00</published><updated>2024-02-09T00:00:00+00:00</updated><id>https://farazkaleemmalik.cyou/blog/2024/homelab1</id><content type="html" xml:base="https://farazkaleemmalik.cyou/blog/2024/homelab1/"><![CDATA[<p>Overview of my extremely budget homelab setup</p>

<p>Now that my Github Student Developer package has run out of DigitalOcean credits (with DO refusing to give me more this year), I decided it would make more sense to move my servers on premises. Maybe this might give you some ideas on how you start your own college dorm servers too!</p>

<p><img src="/assets/images/homelab/setup.jpg" alt="Entire Setup" /></p>

<h2 id="servers">Servers</h2>

<p>First off I have a Raspberry Pi 4B (2GB). Easily the most expensive component, costing ~$100 in 2021. It is being booted off of a USB drive instead of the standard microSD card since in my experience the cards have a much higher failure rate (for any set GB/dollar). Originally this was meant to be my only server, but its limitation of being ARM in an x86_64 world forced me to add another one.</p>

<p>Second is a salvaged motherboard from a Lenovo Ideapad. Even when it was operational it wasn’t a particularly powerful machine, having low power <a href="https://ark.intel.com/content/www/us/en/ark/products/197310/intel-celeron-processor-n4020-4m-cache-up-to-2-80-ghz.html">Celeron N4020 CPU</a>. I took interest in this because of the low power draw (the fact that it was free helped). Some downsides are soldered RAM and storage (with the SSD completely busted), as well as the lack of proper IO like Ethernet or SATA ports. Both servers are booted off of USB Thumbdrives for this reason, with application storage and backups going on the NAS.</p>

<p>My NAS is some old model of a Netgear ReadyNAS Duo. 2 3.5in SATA bays, but only 1 is occupied at the moment (with 500gb). I got this off of Facebook Marketplace recently for $20. The web interface is straight out of 2007, and the security horribly outdated. I found it really nice that despite Netgear exiting the NAS market a few years ago that their forums and support pages are still active (for now). Much of my setup would be very difficult without these. I connect to the NAS on my servers and desktop using NFS, and even stream media to my phone using FTP. Naturally the device is blocked from internet.</p>

<p>Finally there is my OpenWRT router, as seen <a href="/blog/2023/openwrt1/">here</a>. For $15 it has proven to be very versatile thanks to the well supported operating system.</p>
<ul>
  <li>All devices on the LAN get a .lan domain name (the pi is pi.lan etc.) so I can usually forget about looking up IP addresses</li>
  <li>I have it running a DDNS client connected to Namecheap to account for IP changes.</li>
  <li>Comprehensive overview page with diagnostics for every running service and add-on</li>
</ul>

<p>Overall the system could not have costed much more than $150, while keeping the power bill fairly minimal. I like the idea of getting used to slower hardware so any improvements end up feeling quite dramatic! I will probably do something about the laptop motherboard and upgrade NAS capacity for my next steps.</p>]]></content><author><name>Faraz Kaleem Malik</name><email>webmaster@farazkaleemmalik.cyou</email></author><summary type="html"><![CDATA[Overview of my extremely budget homelab setup]]></summary></entry><entry><title type="html">Rant on Android Rooting</title><link href="https://farazkaleemmalik.cyou/blog/2023/lineage1/" rel="alternate" type="text/html" title="Rant on Android Rooting" /><published>2023-10-24T00:00:00+00:00</published><updated>2023-10-24T00:00:00+00:00</updated><id>https://farazkaleemmalik.cyou/blog/2023/lineage1</id><content type="html" xml:base="https://farazkaleemmalik.cyou/blog/2023/lineage1/"><![CDATA[<p>After some piss-poor battery performance, I decided root my phone and install LineageOS. It wasn’t as simple as I thought.</p>

<p>It’s common knowledge that phones nowadays are the opposite of desktop PCs: instead of being modular, customizable, and flexible, they are monolithic, functionally fixed, and bolted down. There are a few initiatives that aim to change that, the most interesting for me being the Pinephone that ditches Android altogether and runs raw Linux, giving you your unified “Desktop-Phone” OS Apple used to proudly boast.</p>

<p><img src="/assets/images/lineageos/apple.png" alt="" /></p>

<p>But the Pinephone, while great for its current price, leaves a lot to be desired specs wise.</p>

<p><img src="/assets/images/lineageos/pinephone.gif" alt="" /></p>

<p>Regardless of what my next phone will be (it will be a Pinepone), this post is about my current phone - a Samsung Galaxy A51. I mentioned this before - rooting this phone is hard. So far the steps I’ve had to take are</p>
<ul>
  <li>Factory reset my phone (I already backed up everything important)</li>
  <li>Mess with time and date settings to disable Knox</li>
  <li>Flash stock firmware a dozen times</li>
  <li>Move down the chain of prerequisite software ~4 times</li>
</ul>

<p>I list my some of my major grievances.</p>

<ol>
  <li>Instructions, even coming from semi-trustworthy sources (XDA forums, TWRP’s official page), are often wildly conflicting, and generally don’t mention the significance of any given step. This makes it very difficult to determine if the step I’m struggling with can be skipped for a minor cost (like no GApps) or is absolutely essential to not bricking my phone. It also makes it very difficult to cross reference. I blame these on Samsung for always adding another hurdle to the custom ROM installation process every update, outdating many tutorials and guides. The best case for me would have been to not upgrade my software for the past year.</li>
  <li>Assumptions of prerequisite software. Currently the chain of software I need to install is <code class="language-plaintext highlighter-rouge">Custom ROM with patched storage capacity -&gt; Magisk -&gt; TWRP -&gt; LineageOS</code>
But all of the official installation guides recommend installing them with software up the chain! I get that no one wants to deal with some guy trying to sue them in Malaysia for bricking his $100 phone, but I think that more work needs to be put into guides that take you from nothing to some useful result - in my case LineageOS. This is hampered by the fact that guides for each model must be different - which again Samsung is to blame. amd64 doesn’t have this problem!</li>
</ol>

<p>Anyways, I will make an update one I have this dang thing installed.</p>

<p><strong><em>Update (27/12/2023)</em></strong>: I made the classic mistake of updating something that Just Works™ and updating firmware to the latest security patch (to get rid of an annoying notification). Great if I want the phone to be useless to someone who stole it, but bad for just about all types of jailbreaking. There is a Github discussion for it <a href="https://github.com/topjohnwu/Magisk/pull/7181">here</a> but I don’t expect to have it fixed anytime soon. I will have to wait a little while longer it seems.</p>]]></content><author><name>Faraz Kaleem Malik</name><email>webmaster@farazkaleemmalik.cyou</email></author><summary type="html"><![CDATA[After some piss-poor battery performance, I decided root my phone and install LineageOS. It wasn’t as simple as I thought.]]></summary></entry><entry><title type="html">Installing OpenWRT onto Linksys E5400</title><link href="https://farazkaleemmalik.cyou/blog/2023/openwrt1/" rel="alternate" type="text/html" title="Installing OpenWRT onto Linksys E5400" /><published>2023-09-10T00:00:00+00:00</published><updated>2023-09-10T00:00:00+00:00</updated><id>https://farazkaleemmalik.cyou/blog/2023/openwrt1</id><content type="html" xml:base="https://farazkaleemmalik.cyou/blog/2023/openwrt1/"><![CDATA[<p>I installed OpenWRT on a router using the TFTP method, using a Linux system as the host.</p>

<h2 id="overview">Overview</h2>

<p>A lot of these instructions can be derived from the <a href="https://openwrt.org/toh/linksys/e5400">official OpenWRT page</a> for the E5400 but the details were a bit sparse, so I needed to do lots of Googling on my own. This post is a compilation of information needed to complete the installation and setup. Unlike the wiki, these instructions are comprehensive and detailed on where I managed to stumble.</p>

<h3 id="step-1-opening-the-router">Step 1: Opening the router</h3>
<p>We need a way to interact with the bootloader. We do this by opening a serial console via UART.</p>

<p>We first need to open the router, by tearing through the sticker and unscrewing at the locations below.
<img src="/assets/images/openwrt/back.jpg" alt="" />
Then, run a shim across the top lid, and attempt to slide off the cover towards the front of the router. This part was surprisingly difficult for me; I broke a few plastic bits before finally getting it off. The router should now look as below.
<img src="/assets/images/openwrt/open.jpg" alt="" />
Carefully remove the antenna connectors at the bottom center-left, the slide the pcb out of the case.</p>

<h3 id="step-2-soldering-pin-headers">Step 2: Soldering pin headers</h3>
<p>The pcb should needs to be soldered with a 5-pin breakaway header where shown. Remember to have the long parts pointing up, and the plastic bit above the pcb.
<img src="/assets/images/openwrt/pcb_sol.jpg" alt="" />
This is great practice for someone learning to solder, so don’t let this daunt you! Now you can place the board into its case, and reattach antennae.
<img src="/assets/images/openwrt/open_sol.jpg" alt="" /></p>

<h3 id="step-3-uart-wiring">Step 3: UART Wiring</h3>
<hr />
<h3 id="warning-doing-this-with-an-arduino-is-a-terrible-idea-risk-of-burning-board">Warning: Doing this with an Arduino is a terrible idea! RISK OF BURNING BOARD!</h3>
<p>According to <a href="https://openwrt.org/toh/linksys/e5400">the relevant wiki article</a>, the router expects a 3.3v serial connection, while an Arduino Uno uses 5v logic for TTL. It didn’t burn my model, but someone following my instructions has reportedly burned out thiers. Use a proper USB-Serial connector like below, and make sure to set it to 3.3v logic by moving the yellow connector to VCC and 3V3!
<img src="/assets/images/openwrt/usb_serial.jpg" alt="" />
For wiring, according to the <a href="https://openwrt.org/toh/linksys/e5400">wiki page</a> the pinout (from back to front with the router facting forwards) is</p>
<ul>
  <li>VCC</li>
  <li>TX (or TXD)</li>
  <li>RX (or RXD)</li>
  <li>(Empty)</li>
  <li>GND</li>
</ul>

<p>Connect these to the corresponding pins on your USB board, remembering to swap RX(D) and TX(D).</p>

<hr />
<p>We now need to communicate the router. To do this you will need a UART to USB adapter. While this can be bought individually, many microcontroller boards have one built in that we can abuse. Here I use an Arduino Uno, and connect the RESET pin to GND for the desired effect.
<img src="/assets/images/openwrt/serial.jpg" alt="" />
The Uno is connected to the host system through USB. The female-to-male jumper wires are connected as shown:
<img src="/assets/images/openwrt/wiring.png" alt="" />
Note that although a shared ground may not be required for this case I include it just to be safe.</p>

<h3 id="step-4-creating-a-terminal">Step 4: Creating a Terminal</h3>
<p>Now, we need to open a terminal with Linux. We will be using <code class="language-plaintext highlighter-rouge">screen</code> so you must install it if you do not already have it. It is a well known Linux package.
First we need to get the device path of our Arduino. There are many ways to do this, but here is a very simple one. First run (with Arduino unplugged)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> /dev/ <span class="o">&gt;</span> ./before.txt
</code></pre></div></div>
<p>Now plug in your Arduino.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> /dev/ <span class="o">&gt;</span> ./after.txt
diff before.txt after.txt
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>86d85
&lt; serial
161d159
&lt; ttyACM0
</code></pre></div></div>
<p>So our device path is /dev/ttyACM0. The path we are looking for must have ‘tty’ since we have a serial device. Remember to <code class="language-plaintext highlighter-rouge">rm before.txt after.txt</code> when done!</p>

<p>To create your terminal, run</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>screen /dev/ttyACM0 115200 <span class="c"># 115200 is the baud rate used by the router</span>
</code></pre></div></div>
<p>This should clear your terminal. If the device you are using has RX and TX lights, then typing should cause one of them to light up. If you press enter while the router is on, you should have a simple terminal prompt show up.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#
</code></pre></div></div>
<p>Try running <code class="language-plaintext highlighter-rouge">ls</code>.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> /
</code></pre></div></div>
<p>If you get reasonable output, success!</p>

<h3 id="step-5-default-firmware-setup">Step 5: Default Firmware Setup</h3>
<p>We will use the TFTP method to install the new firmware. This works by hosting a TFTP server with our firmware image, then instructing the routers bootloader to fetch it and execute. First, restart your router (without disconnecting UART). You will get alot of bootlog text, but wait until this prompt appears:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Please choose the operation:
   1: Load system code to SDRAM via TFTP.
   2: Load system code then write to Flash via TFTP.
   3: Boot system code via Flash (default).
   4: Entr boot command line interface.
   7: Load Boot Loader code then write to Flash via Serial.
   9: Load Boot Loader code then write to Flash via TFTP.
</code></pre></div></div>
<p>Input a 4. Then input the following commands</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setenv serverip 192.168.1.1
setenv ipaddr 192.168.1.100
setenv bootfile openwrt-ramips-mt76x8-linksys_e5400-initramfs-kernel.bin
saveenv
reset <span class="c"># Reboots the router</span>
</code></pre></div></div>
<p>These set the default values for a later step. The IP addresses were chosen arbitrarily, though I cannot guarantee that any valid combination will work.</p>

<h3 id="step-6-tftp-server-setup">Step 6: TFTP Server Setup</h3>
<p>First we install a TFTP server to our Linux machine. Since my machine uses Mint, I used <a href="https://help.ubuntu.com/community/TFTP">this</a> guide. However the guide contains a major inaccuracy so I will simplify it here. First</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>tftpd-hpa
<span class="nb">sudo </span>service tftpd-hpa status
</code></pre></div></div>
<p>If you see ‘Running’, then your TFTP server is already up (press q to exit)! Now we need to make it host our firmware file. First download it from <a href="https://downloads.openwrt.org/snapshots/targets/ramips/mt76x8/openwrt-ramips-mt76x8-linksys_e5400-initramfs-kernel.bin">here</a>. Then move it to /srv/tftp. This is from where tftp-hpa serves its files by default, but the linked guide mentions a different path.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp ~/Downloads/openwrt-ramips-mt76x8-linksys_e5400-initramfs-kernel.bin /srv/tftp/openwrt-ramips-mt76x8-linksys_e5400-initramfs-kernel.bin
</code></pre></div></div>
<p>If you want to confirm that your file is being hosted, try</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tftp <span class="nt">-gr</span> openwrt-ramips-mt76x8-linksys_e5400-initramfs-kernel.bin 127.0.0.1:69 <span class="c"># Download from local server</span>
diff ./openwrt-ramips-mt76x8-linksys_e5400-initramfs-kernel.bin /srv/tftp/openwrt-ramips-mt76x8-linksys_e5400-initramfs-kernel.bin
</code></pre></div></div>
<p>If the <code class="language-plaintext highlighter-rouge">diff</code> shows no output, then your TFTP server is setup. Connect your router to your PC’s Ethernet port. Note that you need to disable DHCP and manually set your IP to 192.168.1.100 (as set previously). Without this your system will not establish a connection. I did this using Cinnamon’s “Network Settings”, but it’s highly dependant on your Desktop Environment.</p>

<h3 id="step-7-downloading-firmware">Step 7: Downloading Firmware</h3>

<p>Back to your router. Restart it by either running <code class="language-plaintext highlighter-rouge">reboot</code> or unplugging (we don’t really care about filesystem integrity at this stage). When it asks you for a boot mode, enter the number 1. Then keep using the default option by pressing enter. These will be the values you set in Step 5. After that, the bootloader will download the image then boot into OpenWRT. You should see a prompt similar to</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R E L E S S   F R E E D O M
 -----------------------------------------------------
 OpenWrt SNAPSHOT, r19314+2-8822a8d850
 -----------------------------------------------------
=== WARNING! =====================================
There is no root password defined on this device!
Use the "passwd" command to set up a new password
in order to prevent unauthorized SSH logins.
--------------------------------------------------
root@OpenWrt:/# 
</code></pre></div></div>
<p>Run <code class="language-plaintext highlighter-rouge">passwd</code> and set it.</p>

<h3 id="step-8-upgrading-firmware">Step 8: Upgrading Firmware</h3>
<p>If we want any packages like LuCI to work, we have to upgrade our image. Download it from <a href="https://openwrt.org/toh/linksys/e5400#installation">here</a>, under “Firmware OpenWrt snapshot Upgrade”, and use <code class="language-plaintext highlighter-rouge">scp</code> to copy it.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp &lt;IMAGENAME&gt; root@&lt;GATEWAYIP&gt;:~/
</code></pre></div></div>
<p>The password is the one you set in Step 7. You could also, as shown in a setup below, use another router (mine is in WIPS mode) and connect it to the E5400’s “Internet” Ethernet port.</p>

<p><img src="/assets/images/openwrt/bootstrap.jpg" alt="" /></p>

<p>Then you could just <code class="language-plaintext highlighter-rouge">wget</code> the image. This is useful as it can allow you to install LuCI without first connecting to Wifi.</p>

<p>Once the file is on the router, run</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sysupgrade &lt;IMAGENAME&gt;
</code></pre></div></div>
<p>After some logs your router will boot into the latest version of OpenWRT available. Run <code class="language-plaintext highlighter-rouge">passwd</code> again to set the root password and enjoy!</p>]]></content><author><name>Faraz Kaleem Malik</name><email>webmaster@farazkaleemmalik.cyou</email></author><summary type="html"><![CDATA[I installed OpenWRT on a router using the TFTP method, using a Linux system as the host.]]></summary></entry></feed>